#!/bin/sh

LINT=$(which swiftlint)

if [[ -e "${LINT}" ]]; then
    echo "🚀  SwiftLint 시작..."
    echo "🔍  lint 적용 경로: $(pwd)"
    count=0
    for file_path in $(git ls-files -m --exclude-from=.gitignore | grep ".swift$"); do
        export SCRIPT_INPUT_FILE_$count=$file_path
        count=$((count + 1))
    done

    # Unstaged/Staged area에서 수정된 swift 파일 확인
    for file_path in $(git diff --name-only --cached | grep ".swift$"); do
        export SCRIPT_INPUT_FILE_$count=$file_path
        count=$((count + 1))
    done

    export SCRIPT_INPUT_FILE_COUNT=$count

    # lint rule 정의 파일
    RESULT=$($LINT lint --quiet --use-script-input-files --config .precommitlint.yml)

    if [ "$RESULT" == '' ]; then
        printf "✨  SwiftLint의 모든 rule을 준수했습니다!! 고생하셨습니다👏 👏 👏\n"
    else
        echo ""
        printf "✔ SwiftLint Failed 아래 내용을 확인해주세요:\n"
        while read -r line; do
            FILEPATH=$(echo $line | cut -d : -f 1)
            L=$(echo $line | cut -d : -f 2)
            C=$(echo $line | cut -d : -f 3)
            TYPE=$(echo $line | cut -d : -f 4 | cut -c 2-)
            MESSAGE=$(echo $line | cut -d : -f 5 | cut -c 2-)
            DESCRIPTION=$(echo $line | cut -d : -f 6 | cut -c 2-)
            if [ $TYPE == 'warning' ]; then
                printf "\n 🚧  $TYPE\n"
            elif [ $TYPE == 'error' ]; then
                printf "\n 🚨  $TYPE\n"
            fi
            printf "    ✔ $FILEPATH:$L:$C\n"
            printf "    📌 $MESSAGE: - $DESCRIPTION\n"
        done <<< "$RESULT"

        printf "\n 🚑  커밋실패!! Swiftlint rule에 맞게 코드를 변경해주세요:)\n"
        exit 1
    fi
else
    echo "SwiftLint가 존재하지 않습니다,"
    exit 1
fi